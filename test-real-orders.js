const fetch = require('node-fetch');

const SERVER_URL = process.env.SERVER_URL || 'http://localhost:3000';

// –†–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
const realOrders = [
  {
    id: 'order_001',
    name: '–ó–∞–∫–∞–∑ #001 - –ö–æ–∫—Ç–µ–π–ª–∏',
    items: ['–ú–æ—Ö–∏—Ç–æ', '–ö–æ—Å–º–æ–ø–æ–ª–∏—Ç–∞–Ω', '–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞'],
    total: 1500
  },
  {
    id: 'order_002', 
    name: '–ó–∞–∫–∞–∑ #002 - –ó–∞–∫—É—Å–∫–∏',
    items: ['–°—ã—Ä–Ω–∞—è —Ç–∞—Ä–µ–ª–∫–∞', '–û–ª–∏–≤–∫–∏', '–ö—Ä–µ–≤–µ—Ç–∫–∏'],
    total: 800
  },
  {
    id: 'order_003',
    name: '–ó–∞–∫–∞–∑ #003 - –û—Å–Ω–æ–≤–Ω—ã–µ –±–ª—é–¥–∞',
    items: ['–°—Ç–µ–π–∫', '–†—ã–±–∞', '–ü–∞—Å—Ç–∞'],
    total: 2500
  }
];

async function createRealOrder(order) {
  console.log(`\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞: ${order.name}`);
  console.log(`   ID: ${order.id}`);
  console.log(`   –ü–æ–∑–∏—Ü–∏–∏: ${order.items.join(', ')}`);
  console.log(`   –°—É–º–º–∞: ${order.total} —Ä—É–±.`);
  
  const webhookData = {
    callback_query: {
      id: `real_${Date.now()}`,
      data: `confirm_${order.id}`,
      message: {
        message_id: Math.floor(Math.random() * 1000),
        chat: { id: 123456789, type: 'private' },
        date: Math.floor(Date.now() / 1000),
        text: `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑: ${order.name}`
      },
      from: {
        id: 123456789,
        is_bot: false,
        first_name: 'Bartender',
        username: 'bar_staff'
      }
    }
  };
  
  try {
    const response = await fetch(`${SERVER_URL}/telegram-webhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(webhookData)
    });
    
    const result = await response.text();
    
    if (response.ok) {
      console.log(`   ‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ${response.status}`);
      return true;
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${response.status} - ${result}`);
      return false;
    }
  } catch (error) {
    console.log(`   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    return false;
  }
}

async function updateOrderStatus(orderId, action, statusName) {
  console.log(`\nüîÑ ${statusName} –∑–∞–∫–∞–∑–∞ ${orderId}...`);
  
  const webhookData = {
    callback_query: {
      id: `update_${Date.now()}`,
      data: `${action}_${orderId}`,
      message: {
        message_id: Math.floor(Math.random() * 1000),
        chat: { id: 123456789, type: 'private' },
        date: Math.floor(Date.now() / 1000),
        text: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: ${statusName}`
      },
      from: {
        id: 123456789,
        is_bot: false,
        first_name: 'Kitchen',
        username: 'kitchen_staff'
      }
    }
  };
  
  try {
    const response = await fetch(`${SERVER_URL}/telegram-webhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(webhookData)
    });
    
    const result = await response.text();
    
    if (response.ok) {
      console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${response.status}`);
      return true;
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${response.status} - ${result}`);
      return false;
    }
  } catch (error) {
    console.log(`   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    return false;
  }
}

async function simulateOrderLifecycle(order) {
  console.log(`\nüé¨ –°–∏–º—É–ª—è—Ü–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∑–∞–∫–∞–∑–∞: ${order.name}`);
  console.log('‚îÄ'.repeat(60));
  
  let successCount = 0;
  let totalSteps = 0;
  
  // 1. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
  totalSteps++;
  if (await createRealOrder(order)) {
    successCount++;
  }
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // 2. –ù–∞—á–∞–ª–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
  totalSteps++;
  if (await updateOrderStatus(order.id, 'preparing', '–ù–∞—á–∞–ª–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è')) {
    successCount++;
  }
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // 3. –ì–æ—Ç–æ–≤–æ –∫ –≤—ã–¥–∞—á–µ
  totalSteps++;
  if (await updateOrderStatus(order.id, 'ready', '–ì–æ—Ç–æ–≤–æ –∫ –≤—ã–¥–∞—á–µ')) {
    successCount++;
  }
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  // 4. –ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω
  totalSteps++;
  if (await updateOrderStatus(order.id, 'completed', '–ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω')) {
    successCount++;
  }
  
  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${order.name}:`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${totalSteps}`);
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${totalSteps - successCount}/${totalSteps}`);
  
  return successCount === totalSteps;
}

async function testRealOrders() {
  console.log('üç∏ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
  console.log(`üìç –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}`);
  console.log('‚îÄ'.repeat(60));
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–µ—Ä–∞
  try {
    const response = await fetch(`${SERVER_URL}/health`);
    const data = await response.json();
    console.log(`üè• –°–µ—Ä–≤–µ—Ä: ${data.status} (uptime: ${Math.round(data.uptime)}s)`);
  } catch (error) {
    console.log(`‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
    return;
  }
  
  console.log(`\nüìã –ë—É–¥–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ ${realOrders.length} –∑–∞–∫–∞–∑–æ–≤:`);
  realOrders.forEach((order, index) => {
    console.log(`   ${index + 1}. ${order.name}`);
  });
  
  let totalSuccess = 0;
  let totalOrders = realOrders.length;
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
  for (const order of realOrders) {
    const success = await simulateOrderLifecycle(order);
    if (success) {
      totalSuccess++;
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
    if (order !== realOrders[realOrders.length - 1]) {
      console.log('\n‚è≥ –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏...');
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  console.log('\n' + '‚îÄ'.repeat(60));
  console.log('üéØ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:');
  console.log(`   üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalSuccess}`);
  console.log(`   ‚ùå –° –æ—à–∏–±–∫–∞–º–∏: ${totalOrders - totalSuccess}`);
  console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((totalSuccess / totalOrders) * 100)}%`);
  
  if (totalSuccess === totalOrders) {
    console.log('\nüéâ –í–°–ï –ó–ê–ö–ê–ó–´ –û–ë–†–ê–ë–û–¢–ê–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('üí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ!');
  } else {
    console.log('\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–∑—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏');
    console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏');
  }
  
  console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Firebase Console –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤');
  console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ TELEGRAM_BOT_TOKEN –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏');
}

testRealOrders().catch(console.error);
