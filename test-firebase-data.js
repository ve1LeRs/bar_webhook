const fetch = require('node-fetch');

const SERVER_URL = process.env.SERVER_URL || 'http://localhost:3000';

async function testFirebaseData() {
  console.log('üî• –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Firebase');
  console.log(`üìç –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}`);
  console.log('‚îÄ'.repeat(50));
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
  const testOrderId = `test_order_${Date.now()}`;
  console.log(`üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞: ${testOrderId}`);
  
  const webhookData = {
    callback_query: {
      id: `test_${Date.now()}`,
      data: `confirm_${testOrderId}`,
      message: {
        message_id: 123,
        chat: { id: 123456789, type: 'private' },
        date: Math.floor(Date.now() / 1000),
        text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
      },
      from: {
        id: 123456789,
        is_bot: false,
        first_name: 'Test',
        username: 'test_user'
      }
    }
  };
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º webhook
    const response = await fetch(`${SERVER_URL}/telegram-webhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(webhookData)
    });
    
    const result = await response.text();
    
    if (response.ok) {
      console.log(`‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ${response.status} - ${result}`);
      
      // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      console.log(`\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "preparing"...`);
      
      const updateData = {
        ...webhookData,
        callback_query: {
          ...webhookData.callback_query,
          id: `test_${Date.now()}`,
          data: `preparing_${testOrderId}`
        }
      };
      
      const updateResponse = await fetch(`${SERVER_URL}/telegram-webhook`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updateData)
      });
      
      const updateResult = await updateResponse.text();
      
      if (updateResponse.ok) {
        console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${updateResponse.status} - ${updateResult}`);
        
        // –ï—â–µ –æ–¥–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        console.log(`\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ "ready"...`);
        
        const readyData = {
          ...webhookData,
          callback_query: {
            ...webhookData.callback_query,
            id: `test_${Date.now()}`,
            data: `ready_${testOrderId}`
          }
        };
        
        const readyResponse = await fetch(`${SERVER_URL}/telegram-webhook`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(readyData)
        });
        
        const readyResult = await readyResponse.text();
        
        if (readyResponse.ok) {
          console.log(`‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${readyResponse.status} - ${readyResult}`);
          console.log(`\nüéâ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ ${testOrderId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ–±–Ω–æ–≤–ª–µ–Ω!`);
          console.log(`üìä –°—Ç–∞—Ç—É—Å—ã: confirmed ‚Üí preparing ‚Üí ready`);
        } else {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ ready: ${readyResponse.status} - ${readyResult}`);
        }
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateResponse.status} - ${updateResult}`);
      }
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: ${response.status} - ${result}`);
    }
  } catch (error) {
    console.log(`üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
  }
  
  console.log('\n‚îÄ'.repeat(50));
  console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Firebase Console –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  console.log('üìÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è: orders');
  console.log(`üìÑ –î–æ–∫—É–º–µ–Ω—Ç: ${testOrderId}`);
}

testFirebaseData().catch(console.error);
