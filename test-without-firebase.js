const fetch = require('node-fetch');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const SERVER_URL = process.env.SERVER_URL || 'http://localhost:3000';
const TEST_ORDER_ID = 'test_order_123';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testCallbacks = [
  {
    name: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞',
    data: `confirm_${TEST_ORDER_ID}`,
    expectedStatus: 'confirmed'
  },
  {
    name: '–ù–∞—á–∞–ª–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è',
    data: `preparing_${TEST_ORDER_ID}`,
    expectedStatus: 'preparing'
  },
  {
    name: '–ì–æ—Ç–æ–≤–æ –∫ –≤—ã–¥–∞—á–µ',
    data: `ready_${TEST_ORDER_ID}`,
    expectedStatus: 'ready'
  },
  {
    name: '–ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω',
    data: `completed_${TEST_ORDER_ID}`,
    expectedStatus: 'completed'
  },
  {
    name: '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞',
    data: `cancel_${TEST_ORDER_ID}`,
    expectedStatus: 'cancelled'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook
async function sendTestWebhook(callbackData) {
  const webhookData = {
    callback_query: {
      id: `test_${Date.now()}`,
      data: callbackData,
      message: {
        message_id: 123,
        chat: { id: 123456789, type: 'private' },
        date: Math.floor(Date.now() / 1000),
        text: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'
      },
      from: {
        id: 123456789,
        is_bot: false,
        first_name: 'Test',
        username: 'test_user'
      }
    }
  };

  try {
    console.log(`üß™ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ webhook: ${callbackData}`);
    
    const response = await fetch(`${SERVER_URL}/telegram-webhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(webhookData)
    });

    const result = await response.text();
    
    if (response.ok) {
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${response.status} - ${result}`);
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${response.status} - ${result}`);
    }
    
    return { success: response.ok, status: response.status, result };
    
  } catch (error) {
    console.log(`üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    return { success: false, error: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
async function checkServerHealth() {
  try {
    console.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...');
    
    const response = await fetch(`${SERVER_URL}/health`);
    const result = await response.json();
    
    if (response.ok) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç:', result);
      return true;
    } else {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:', result);
      return false;
    }
  } catch (error) {
    console.log('üí• –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
async function testDataValidation() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...');
  
  const invalidTests = [
    {
      name: '–ü—É—Å—Ç–æ–π callback_data',
      data: '',
      expectedError: 'Invalid callback data'
    },
    {
      name: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback_data',
      data: 'invalid_format',
      expectedError: 'Invalid callback data'
    },
    {
      name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
      data: 'unknown_action_test_order',
      expectedError: 'Unknown action'
    }
  ];
  
  let validationSuccessCount = 0;
  
  for (const test of invalidTests) {
    console.log(`\nüìã ${test.name}`);
    console.log(`   Callback: "${test.data}"`);
    console.log(`   –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: ${test.expectedError}`);
    
    const result = await sendTestWebhook(test.data);
    
    if (!result.success && result.result.includes(test.expectedError)) {
      console.log(`   ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
      validationSuccessCount++;
    } else {
      console.log(`   ‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞: ${result.result}`);
    }
    
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  return validationSuccessCount === invalidTests.length;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ webhook —Å–µ—Ä–≤–µ—Ä–∞ (–±–µ–∑ Firebase)');
  console.log(`üìç –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}`);
  console.log('‚îÄ'.repeat(50));
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
  const serverHealthy = await checkServerHealth();
  if (!serverHealthy) {
    console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –∑–∞–ø—É—â–µ–Ω.');
    process.exit(1);
  }
  
  console.log('');
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  const validationWorking = await testDataValidation();
  if (validationWorking) {
    console.log('\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  } else {
    console.log('\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –¥–∞–Ω–Ω—ã—Ö');
  }
  
  console.log('');
  
  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook-–æ–≤ (–æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫–∏ Firebase)
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook-–æ–≤ (–æ–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫–∏ Firebase)...');
  console.log('‚îÄ'.repeat(50));
  
  let successCount = 0;
  let totalCount = testCallbacks.length;
  
  for (const test of testCallbacks) {
    console.log(`\nüìã ${test.name}`);
    console.log(`   Callback: ${test.data}`);
    console.log(`   –û–∂–∏–¥–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å: ${test.expectedStatus}`);
    
    const result = await sendTestWebhook(test.data);
    
    // –û–∂–∏–¥–∞–µ–º –æ—à–∏–±–∫—É "Database not initialized" - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –±–µ–∑ Firebase
    if (!result.success && result.result.includes('Database not initialized')) {
      console.log(`   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ (Firebase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)`);
      successCount++;
    } else if (result.success) {
      console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);
      successCount++;
    } else {
      console.log(`   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${result.error || result.result}`);
    }
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\n' + '‚îÄ'.repeat(50));
  console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}/${totalCount}`);
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${totalCount - successCount}/${totalCount}`);
  
  if (successCount === totalCount) {
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');
    console.log('üí° –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, Firebase –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)');
  } else {
    console.log('‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞.');
  }
  
  console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   1. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Firebase (service-account-key.json)');
  console.log('   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ TELEGRAM_BOT_TOKEN –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram API');
  console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runTests().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { runTests, sendTestWebhook, checkServerHealth, testDataValidation };
