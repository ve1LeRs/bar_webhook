const fetch = require('node-fetch');

const SERVER_URL = process.env.SERVER_URL || 'http://localhost:3000';

async function testCancelOrder() {
  console.log('‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞');
  console.log(`üìç –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}`);
  console.log('‚îÄ'.repeat(50));
  
  const orderId = `cancel_test_${Date.now()}`;
  console.log(`üìã –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑: ${orderId}`);
  
  // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
  console.log('\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...');
  const createData = {
    callback_query: {
      id: `create_${Date.now()}`,
      data: `confirm_${orderId}`,
      message: {
        message_id: 123,
        chat: { id: 123456789, type: 'private' },
        date: Math.floor(Date.now() / 1000),
        text: '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–º–µ–Ω—ã'
      },
      from: {
        id: 123456789,
        is_bot: false,
        first_name: 'Customer',
        username: 'customer_test'
      }
    }
  };
  
  try {
    const createResponse = await fetch(`${SERVER_URL}/telegram-webhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(createData)
    });
    
    if (createResponse.ok) {
      console.log('   ‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${createResponse.status}`);
      return;
    }
  } catch (error) {
    console.log(`   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
    return;
  }
  
  // 2. –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ
  console.log('\n2Ô∏è‚É£ –ù–∞—á–∞–ª–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è...');
  const preparingData = {
    callback_query: {
      id: `preparing_${Date.now()}`,
      data: `preparing_${orderId}`,
      message: {
        message_id: 124,
        chat: { id: 123456789, type: 'private' },
        date: Math.floor(Date.now() / 1000),
        text: '–ù–∞—á–∞–ª–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è'
      },
      from: {
        id: 123456789,
        is_bot: false,
        first_name: 'Kitchen',
        username: 'kitchen_staff'
      }
    }
  };
  
  try {
    const preparingResponse = await fetch(`${SERVER_URL}/telegram-webhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(preparingData)
    });
    
    if (preparingResponse.ok) {
      console.log('   ‚úÖ –ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞—Ç–æ');
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${preparingResponse.status}`);
    }
  } catch (error) {
    console.log(`   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
  }
  
  // 3. –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
  console.log('\n3Ô∏è‚É£ –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞...');
  const cancelData = {
    callback_query: {
      id: `cancel_${Date.now()}`,
      data: `cancel_${orderId}`,
      message: {
        message_id: 125,
        chat: { id: 123456789, type: 'private' },
        date: Math.floor(Date.now() / 1000),
        text: '–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞'
      },
      from: {
        id: 123456789,
        is_bot: false,
        first_name: 'Manager',
        username: 'manager'
      }
    }
  };
  
  try {
    const cancelResponse = await fetch(`${SERVER_URL}/telegram-webhook`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(cancelData)
    });
    
    const cancelResult = await cancelResponse.text();
    
    if (cancelResponse.ok) {
      console.log('   ‚úÖ –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log(`   üìÑ –û—Ç–≤–µ—Ç: ${cancelResult}`);
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: ${cancelResponse.status} - ${cancelResult}`);
    }
  } catch (error) {
    console.log(`   üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`);
  }
  
  console.log('\n‚îÄ'.repeat(50));
  console.log('üéØ –¢–µ—Å—Ç –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω');
  console.log(`üìã –ó–∞–∫–∞–∑ ID: ${orderId}`);
  console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Firebase Console –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞');
}

testCancelOrder().catch(console.error);
