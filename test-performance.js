const fetch = require('node-fetch');

const SERVER_URL = process.env.SERVER_URL || 'http://localhost:3000';

async function testPerformance() {
  console.log('‚ö° –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
  console.log(`üìç –°–µ—Ä–≤–µ—Ä: ${SERVER_URL}`);
  console.log('‚îÄ'.repeat(50));
  
  const concurrentRequests = 10;
  const orders = [];
  
  // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  for (let i = 1; i <= concurrentRequests; i++) {
    orders.push({
      id: `perf_test_${i}_${Date.now()}`,
      name: `–ó–∞–∫–∞–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ #${i}`
    });
  }
  
  console.log(`üìã –°–æ–∑–¥–∞–Ω–æ ${concurrentRequests} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è`);
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ ${concurrentRequests} –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);
  
  const startTime = Date.now();
  
  // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  const createPromises = orders.map(async (order, index) => {
    const webhookData = {
      callback_query: {
        id: `perf_${index}_${Date.now()}`,
        data: `confirm_${order.id}`,
        message: {
          message_id: 1000 + index,
          chat: { id: 123456789, type: 'private' },
          date: Math.floor(Date.now() / 1000),
          text: order.name
        },
        from: {
          id: 123456789,
          is_bot: false,
          first_name: `User${index}`,
          username: `user_${index}`
        }
      }
    };
    
    try {
      const response = await fetch(`${SERVER_URL}/telegram-webhook`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(webhookData)
      });
      
      const result = await response.text();
      
      return {
        orderId: order.id,
        success: response.ok,
        status: response.status,
        responseTime: Date.now() - startTime
      };
    } catch (error) {
      return {
        orderId: order.id,
        success: false,
        error: error.message,
        responseTime: Date.now() - startTime
      };
    }
  });
  
  // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const results = await Promise.all(createPromises);
  
  const endTime = Date.now();
  const totalTime = endTime - startTime;
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const successful = results.filter(r => r.success).length;
  const failed = results.filter(r => !r.success).length;
  const avgResponseTime = results.reduce((sum, r) => sum + r.responseTime, 0) / results.length;
  
  console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò:');
  console.log('‚îÄ'.repeat(50));
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
  console.log(`üìà –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(avgResponseTime)}ms`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successful}/${concurrentRequests}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${failed}/${concurrentRequests}`);
  console.log(`üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((successful / concurrentRequests) * 100)}%`);
  console.log(`üöÄ –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: ${Math.round((concurrentRequests / totalTime) * 1000)}`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –∑–∞–ø—Ä–æ—Å—É
  console.log('\nüìã –î–ï–¢–ê–õ–ò –ü–û –ó–ê–ü–†–û–°–ê–ú:');
  results.forEach((result, index) => {
    const status = result.success ? '‚úÖ' : '‚ùå';
    const time = result.responseTime;
    console.log(`   ${status} –ó–∞–∫–∞–∑ ${index + 1}: ${result.orderId} (${time}ms)`);
    if (!result.success) {
      console.log(`      –û—à–∏–±–∫–∞: ${result.error || result.status}`);
    }
  });
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
  console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤...');
  
  const updateStartTime = Date.now();
  const updatePromises = orders.slice(0, 5).map(async (order, index) => {
    const webhookData = {
      callback_query: {
        id: `update_${index}_${Date.now()}`,
        data: `preparing_${order.id}`,
        message: {
          message_id: 2000 + index,
          chat: { id: 123456789, type: 'private' },
          date: Math.floor(Date.now() / 1000),
          text: `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ${order.name}`
        },
        from: {
          id: 123456789,
          is_bot: false,
          first_name: `Kitchen${index}`,
          username: `kitchen_${index}`
        }
      }
    };
    
    try {
      const response = await fetch(`${SERVER_URL}/telegram-webhook`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(webhookData)
      });
      
      return {
        orderId: order.id,
        success: response.ok,
        status: response.status
      };
    } catch (error) {
      return {
        orderId: order.id,
        success: false,
        error: error.message
      };
    }
  });
  
  const updateResults = await Promise.all(updatePromises);
  const updateEndTime = Date.now();
  const updateTotalTime = updateEndTime - updateStartTime;
  
  const updateSuccessful = updateResults.filter(r => r.success).length;
  
  console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateTotalTime}ms`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: ${updateSuccessful}/${updatePromises.length}`);
  
  console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
  if (successful === concurrentRequests && updateSuccessful === updatePromises.length) {
    console.log('üéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Ç–ª–∏—á–Ω—É—é –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!');
    console.log('üí° –ì–æ—Ç–æ–≤–∞ –∫ –≤—ã—Å–æ–∫–∏–º –Ω–∞–≥—Ä—É–∑–∫–∞–º');
  } else if (successful >= concurrentRequests * 0.9) {
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ');
    console.log('üí° –ù–µ–±–æ–ª—å—à–∏–µ –æ—à–∏–±–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã');
  } else {
    console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é');
    console.log('üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è');
  }
  
  console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
  console.log('   1. –ú–æ–Ω–∏—Ç–æ—Ä—å—Ç–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω');
  console.log('   2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
  console.log('   3. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
  console.log('   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Firebase –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
}

testPerformance().catch(console.error);
